Titre, Contenu, Pièces jointes, Auteur, Date de création, Date de mise à jour
"La navigation entre les pages en architecture ""application en page unique""","","",Hy-Vong,2020-02-10 20:18:35 UTC,2020-02-10 20:18:35 UTC
Les contextes de this,"<div>L'opérateur this peut être appelé dans différents contextes en JavaScript, tels que : le contexte global, de fonction, ou dans la méthode d'un objet. Dans ces cas, il n'agit pas de la même façon. Dans le contexte global, dans aucune fonction ou objet, this se réfère à l'objet global (la fenêtre par exemple). C'est la même chose dans une fonction. Or, dans la méthode d'un objet, this se réfère à l'objet dans lequel la méthode est définie, similairement à beaucoup d'autres langages de programmation orientée objet.</div>","",Hy-Vong,2020-02-10 20:13:39 UTC,2020-02-10 20:18:15 UTC
Les éléments asynchrones,"<div>Le JavaScript fait usage de fonctions asynchrones qu'on définit le plus souvent à l'aide de ""callbacks"". C'est le cas de la gestion des événements : une fonction est passée en paramètre et est appelée seulement au déclenchement de l'événement.<br>Si un autre morceau de code se situe à la suite, alors il s’exécutera sans attendre que l'événement se soit produit.</div>","",Hy-Vong,2020-02-10 20:00:15 UTC,2020-02-10 20:08:59 UTC
Les principales fonctionnalités de CreateJS utilisées,"<div>CreateJS étant une librairie graphique pour JavaScript, les principales fonctionnalités utilisées sont la création d'image statiques, de spritesheets (animation image par image dans un fichier), et de sprites (objet graphique affiché à l'écran).</div>","",Hy-Vong,2020-02-10 19:57:11 UTC,2020-02-10 20:00:06 UTC
Les closures,"<div>La gestion de la mémoire étant différente en JavaScript que dans les autres langages,<br>une méthode  dans une classe a un accès à son contexte englobant, c'est-à-dire aux variables lui étant extérieures. La closure définit cette fonctionnalité qu'a une fonction à connaître son environnement extérieur.</div>","",Hy-Vong,2020-02-10 19:51:46 UTC,2020-02-10 19:54:39 UTC
Les événements nouveaux pour le projet,"","",Hy-Vong,2020-02-10 19:47:43 UTC,2020-02-10 19:49:00 UTC
Les événements des objets natifs,<div>Les événements sont des actions déclenchables par l'intermédiaire de l'utilisateur ou simplement par le système. Ils agissent comme un signal que le développeur peut choisir de prendre en charge. Les événements standards sont décrits dans les spécifications officielles du web et sont donc communs à l'intégralité des navigateurs.</div>,"",Hy-Vong,2020-02-10 19:35:19 UTC,2020-02-10 19:47:34 UTC
La simulation d'un constructeur et ses paramètres,"<div>Le constructeur est la méthode appelée à la création d'un objet. Il peut être dupliqué pour fournir des configurations de paramètres différentes. Ainsi, un objet peut être créé de manières diverses selon le constructeur choisi.</div>","",Hy-Vong,2020-02-10 19:32:36 UTC,2020-02-10 19:35:12 UTC
Encapsulation privée et publique,"<div>L'encapsulation est un principe fondamental de la programmation orientée objet, et définit l’accessibilité des éléments d'une classe. L'encapsulation publique rend accessible l'élément depuis n'importe quelle classe extérieure alors que la privée définit l'élément comme accessible uniquement dans sa propre classe.</div>","",Hy-Vong,2020-02-10 19:29:02 UTC,2020-02-10 19:32:25 UTC
Les classes,"<div>Les classes sont des formes d'organisation de données regroupant et définissant les propriétés et les fonctions d'une entité. À partir de ce schéma, on peut créer un objet.</div>","",Hy-Vong,2020-02-10 19:26:45 UTC,2020-02-10 19:31:50 UTC
